import numpy as np                        #implementing librararies
import matplotlib.pyplot as plt
import h5py
import scipy                                  
from PIL import Image
from scipy import ndimage


%matplotlib inline


import numpy as np
import h5py
    
    
def load_dataset():
    train_dataset = h5py.File('train_catvnoncat.h5', "r")  #implementing your training dataset
    train_set_x_orig = np.array(train_dataset["train_set_x"][:]) # your train set features
    train_set_y_orig = np.array(train_dataset["train_set_y"][:]) # your train set labels

    test_dataset = h5py.File('test_catvnoncat.h5', "r") #implementing your test dataset
    test_set_x_orig = np.array(test_dataset["test_set_x"][:]) # your test set features
    test_set_y_orig = np.array(test_dataset["test_set_y"][:]) # your test set labels

    classes = np.array(test_dataset["list_classes"][:]) # the list of classes
    
    train_set_y_orig = train_set_y_orig.reshape((1, train_set_y_orig.shape[0]))
    test_set_y_orig = test_set_y_orig.reshape((1, test_set_y_orig.shape[0]))
    
    return train_set_x_orig, train_set_y_orig, test_set_x_orig, test_set_y_orig, classes
    
    train_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_dataset()
    
m_train = train_set_x_orig.shape[0]
m_test = test_set_x_orig.shape[0]           #defining m training examples and m test examples
num_px = train_set_x_orig.shape[1]          #defining pixels size in image dataset

train_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0],-1).T   #vectorizing dataset images pixels
test_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0],-1).T

train_set_x = train_set_x_flatten/255.   #Normalizing vector 
test_set_x = test_set_x_flatten/255.

w = np.zeros(shape = (train_set_x.shape[0],1))   #initializing weight and biases
b = 0

assert(w.shape == (train_set_x.shape[0], 1))
assert(isinstance(b, float) or isinstance(b, int))

def propagate(w,b,X,Y):            #defining forward propagation function
    m = X.shape[1]
    A = 1/(1+np.exp(-(np.dot(w.T,X) + b )))         #sigmoid function                          
    cost = -(1/m)*np.sum(np.multiply(Y,np.log(A)) + np.multiply((1-Y),np.log(1-A)), axis=1)    #logistic regression function 
    dw = (1/m)*np.dot(X,(A-Y).T)   #calculating gradients
    db = (1/m)*(np.sum(A-Y))
    assert(dw.shape == w.shape)
    assert(db.dtype == float)
    cost = np.squeeze(cost)
    assert(cost.shape == ())
    grads = {"dw": dw,"db": db}
    return grads, cost
    
def optimize(w, b, X, Y, num_iterations, learning_rate, print_cost = False):  #gradient descent optimizing
    costs = []                    #lists of all cost functions 
    for i in range(num_iterations):
        grads, cost = propagate(w, b, X, Y)
        dw = grads["dw"]
        db = grads["db"]
        w = w - (learning_rate*dw)          #implementing backpropagation
        b = b - (learning_rate*db)
        if i % 100 == 0:
            costs.append(cost)
        if print_cost and i % 100 == 0:
            print ("Cost after iteration %i: %f" %(i, cost))
    params = {"w": w,"b": b}
    grads = {"dw": dw,"db": db}
    return params, grads, costs

def predict(w, b, X):                     #predicting the output
    m = X.shape[1]
    Y_prediction = np.zeros((1,m))        #initializing output vector
    w = w.reshape(X.shape[0], 1)
    A = 1/(1+np.exp(-(np.dot(w.T, X) + b)))
    for i in range(A.shape[1]):
        if A[0][i] > 0.5:
            Y_prediction[0][i] = 1
        else:
            Y_prediction[0][i] = 0
        pass
    assert(Y_prediction.shape == (1, m))
    return Y_prediction


def model(X_train, Y_train, X_test, Y_test, num_iterations = 2000, learning_rate = 0.5, print_cost = False):     #training model
    w, b = np.zeros((X_train.shape[0], 1)), 0
    parameters, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost)
    w = parameters["w"]
    b = parameters["b"]
    Y_prediction_test = predict(w, b, X_test)
    Y_prediction_train = predict(w, b, X_train)
    print("train accuracy: {} %".format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100))
    print("test accuracy: {} %".format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100))
    d = {"costs": costs,
         "Y_prediction_test": Y_prediction_test, 
         "Y_prediction_train" : Y_prediction_train, 
         "w" : w, 
         "b" : b,
         "learning_rate" : learning_rate,
         "num_iterations": num_iterations}
    
    return d
d = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 2000, learning_rate = 0.005, print_cost = True)


my_image = "my_image.jpg"   #image whichever you want to put to predict for cat or non cat
image = np.array(ndimage.imread(my_image, flatten=False))  #dataset preprocessing
image = image/255.
my_image = scipy.misc.imresize(image, size=(num_px,num_px)).reshape((1, num_px*num_px*3)).T
my_predicted_image = predict(d["w"], d["b"], my_image)

plt.imshow(image)
print("y = " + str(np.squeeze(my_predicted_image)) + ", algorithm predicts a \"" + classes[int(np.squeeze(my_predicted_image)),].decode("utf-8") +  "\" picture.")
